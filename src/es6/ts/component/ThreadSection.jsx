import * as React from "react";
import ThreadStore from "../store/ThreadStore";
import UnreadThreadStore from "../store/UnreadThreadStore";
import ThreadListItem from "./ThreadListItem";
export class ThreadSection extends React.Component {
    constructor(props) {
        super(props);
        this.onChange = () => {
            this.setState(ThreadSection.getStateFromStores());
        };
        this.state = ThreadSection.getStateFromStores();
    }
    static getStateFromStores() {
        return {
            threads: ThreadStore.getAllChrono(),
            currentThreadID: ThreadStore.getCurrentID(),
            unreadCount: UnreadThreadStore.getCount()
        };
    }
    componentDidMount() {
        ThreadStore.addChangeListener(this.onChange);
        UnreadThreadStore.addChangeListener(this.onChange);
    }
    componentWillUnmount() {
        ThreadStore.removeChangeListener(this.onChange);
        UnreadThreadStore.removeChangeListener(this.onChange);
    }
    render() {
        var threadListItems = this.state.threads.map((thread, index) => {
            return (<ThreadListItem key={index} thread={thread} currentThreadID={this.state.currentThreadID}/>);
        }, this);
        var unread = this.state.unreadCount === 0 ?
            null :
            <span>Unread threads: {this.state.unreadCount}</span>;
        return (<div className="thread-section">
				<div className="thread-count">
					{unread}
				</div>
				<ul className="thread-list">
					{threadListItems}
				</ul>
			</div>);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhyZWFkU2VjdGlvbi5qc3giLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy9jb21wb25lbnQvVGhyZWFkU2VjdGlvbi50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BQU8sS0FBSyxLQUFLLE1BQU0sT0FBTztPQUV2QixXQUFXLE1BQU0sc0JBQXNCO09BQ3ZDLGlCQUFpQixNQUFNLDRCQUE0QjtPQUNuRCxjQUFjLE1BQU0sa0JBQWtCO0FBYzdDLG1DQUFtQyxLQUFLLENBQUMsU0FBUztJQUVqRCxZQUFZLEtBQXdCO1FBRW5DLE1BQU0sS0FBSyxDQUFDLENBQUM7UUFhTixhQUFRLEdBQUM7WUFDaEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO1FBQ25ELENBQUMsQ0FBQTtRQWRBLElBQUksQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDakQsQ0FBQztJQUVELE9BQU8sa0JBQWtCO1FBRXhCLE1BQU0sQ0FBQztZQUNOLE9BQU8sRUFBRSxXQUFXLENBQUMsWUFBWSxFQUFFO1lBQ25DLGVBQWUsRUFBRSxXQUFXLENBQUMsWUFBWSxFQUFFO1lBQzNDLFdBQVcsRUFBRSxpQkFBaUIsQ0FBQyxRQUFRLEVBQUU7U0FDekMsQ0FBQTtJQUNGLENBQUM7SUFNRCxpQkFBaUI7UUFDaEIsV0FBVyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM3QyxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELG9CQUFvQjtRQUNuQixXQUFXLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hELGlCQUFpQixDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsTUFBTTtRQUVMLElBQUksZUFBZSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQWtCLEVBQUUsS0FBWTtZQUM3RSxNQUFNLENBQUMsQ0FDTixDQUFDLGNBQWMsQ0FDZCxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FDWCxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FDZixlQUFlLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxFQUMzQyxDQUNGLENBQUM7UUFDSCxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDVCxJQUFJLE1BQU0sR0FDVCxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsS0FBSyxDQUFDO1lBQzNCLElBQUk7WUFDSixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3hELE1BQU0sQ0FBQyxDQUNOLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FDOUI7SUFBQSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUM1QjtLQUFBLENBQUMsTUFBTSxDQUNSO0lBQUEsRUFBRSxHQUFHLENBQ0w7SUFBQSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUMxQjtLQUFBLENBQUMsZUFBZSxDQUNqQjtJQUFBLEVBQUUsRUFBRSxDQUNMO0dBQUEsRUFBRSxHQUFHLENBQUMsQ0FDTixDQUFDO0lBQ0gsQ0FBQztBQUNGLENBQUM7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtUaHJlYWRTdGF0ZX0gZnJvbSBcIi4uL1RocmVhZFwiO1xuaW1wb3J0IFRocmVhZFN0b3JlIGZyb20gXCIuLi9zdG9yZS9UaHJlYWRTdG9yZVwiO1xuaW1wb3J0IFVucmVhZFRocmVhZFN0b3JlIGZyb20gXCIuLi9zdG9yZS9VbnJlYWRUaHJlYWRTdG9yZVwiO1xuaW1wb3J0IFRocmVhZExpc3RJdGVtIGZyb20gXCIuL1RocmVhZExpc3RJdGVtXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkU2VjdGlvblByb3BzXG57XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBUaHJlYWRTZWN0aW9uU3RhdGVcbntcblx0dGhyZWFkczogVGhyZWFkU3RhdGVbXTtcblx0Y3VycmVudFRocmVhZElEOiBzdHJpbmc7XG5cdHVucmVhZENvdW50OiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBUaHJlYWRTZWN0aW9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFRocmVhZFNlY3Rpb25Qcm9wcywgVGhyZWFkU2VjdGlvblN0YXRlPlxue1xuXHRjb25zdHJ1Y3Rvcihwcm9wczpUaHJlYWRTZWN0aW9uUHJvcHMpXG5cdHtcblx0XHRzdXBlcihwcm9wcyk7XG5cdFx0dGhpcy5zdGF0ZSA9IFRocmVhZFNlY3Rpb24uZ2V0U3RhdGVGcm9tU3RvcmVzKCk7XG5cdH1cblxuXHRzdGF0aWMgZ2V0U3RhdGVGcm9tU3RvcmVzKClcblx0e1xuXHRcdHJldHVybiB7XG5cdFx0XHR0aHJlYWRzOiBUaHJlYWRTdG9yZS5nZXRBbGxDaHJvbm8oKSxcblx0XHRcdGN1cnJlbnRUaHJlYWRJRDogVGhyZWFkU3RvcmUuZ2V0Q3VycmVudElEKCksXG5cdFx0XHR1bnJlYWRDb3VudDogVW5yZWFkVGhyZWFkU3RvcmUuZ2V0Q291bnQoKVxuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgb25DaGFuZ2U9KCk9PiB7XG5cdFx0dGhpcy5zZXRTdGF0ZShUaHJlYWRTZWN0aW9uLmdldFN0YXRlRnJvbVN0b3JlcygpKTtcblx0fVxuXG5cdGNvbXBvbmVudERpZE1vdW50KCkge1xuXHRcdFRocmVhZFN0b3JlLmFkZENoYW5nZUxpc3RlbmVyKHRoaXMub25DaGFuZ2UpO1xuXHRcdFVucmVhZFRocmVhZFN0b3JlLmFkZENoYW5nZUxpc3RlbmVyKHRoaXMub25DaGFuZ2UpO1xuXHR9XG5cblx0Y29tcG9uZW50V2lsbFVubW91bnQoKSB7XG5cdFx0VGhyZWFkU3RvcmUucmVtb3ZlQ2hhbmdlTGlzdGVuZXIodGhpcy5vbkNoYW5nZSk7XG5cdFx0VW5yZWFkVGhyZWFkU3RvcmUucmVtb3ZlQ2hhbmdlTGlzdGVuZXIodGhpcy5vbkNoYW5nZSk7XG5cdH1cblxuXHRyZW5kZXIoKVxuXHR7XG5cdFx0dmFyIHRocmVhZExpc3RJdGVtcyA9IHRoaXMuc3RhdGUudGhyZWFkcy5tYXAoKHRocmVhZDpUaHJlYWRTdGF0ZSwgaW5kZXg6bnVtYmVyKSA9PiB7XG5cdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHQ8VGhyZWFkTGlzdEl0ZW1cblx0XHRcdFx0XHRrZXk9e2luZGV4fVxuXHRcdFx0XHRcdHRocmVhZD17dGhyZWFkfVxuXHRcdFx0XHRcdGN1cnJlbnRUaHJlYWRJRD17dGhpcy5zdGF0ZS5jdXJyZW50VGhyZWFkSUR9XG5cdFx0XHRcdC8+XG5cdFx0XHQpO1xuXHRcdH0sIHRoaXMpO1xuXHRcdHZhciB1bnJlYWQgPVxuXHRcdFx0dGhpcy5zdGF0ZS51bnJlYWRDb3VudCA9PT0gMCA/XG5cdFx0XHRcdG51bGwgOlxuXHRcdFx0XHQ8c3Bhbj5VbnJlYWQgdGhyZWFkczoge3RoaXMuc3RhdGUudW5yZWFkQ291bnR9PC9zcGFuPjtcblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJ0aHJlYWQtc2VjdGlvblwiPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cInRocmVhZC1jb3VudFwiPlxuXHRcdFx0XHRcdHt1bnJlYWR9XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8dWwgY2xhc3NOYW1lPVwidGhyZWFkLWxpc3RcIj5cblx0XHRcdFx0XHR7dGhyZWFkTGlzdEl0ZW1zfVxuXHRcdFx0XHQ8L3VsPlxuXHRcdFx0PC9kaXY+XG5cdFx0KTtcblx0fVxufSJdfQ==