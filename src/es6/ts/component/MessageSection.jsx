import * as React from "react";
import MessageStore from "../store/MessageStore";
import ThreadStore from "../store/ThreadStore";
import MessageComposer from "./MessageComposer";
import MessageListItem from "./MessageListItem";
export default class MessageSection extends React.Component {
    constructor(props) {
        super(props);
        this.onChange = () => {
            this.setState(MessageSection.getStateFromStores());
        };
        this.state = MessageSection.getStateFromStores();
    }
    static getStateFromStores() {
        return {
            messages: MessageStore.getAllForCurrentThread(),
            thread: ThreadStore.getCurrent(),
            currentID: ThreadStore.getCurrentID()
        };
    }
    static getMessageListItem(message, index) {
        return (<MessageListItem key={index} message={message}/>);
    }
    componentDidMount() {
        this.scrollToBottom();
        MessageStore.addChangeListener(this.onChange);
        ThreadStore.addChangeListener(this.onChange);
    }
    componentWillUnmount() {
        MessageStore.removeChangeListener(this.onChange);
        ThreadStore.removeChangeListener(this.onChange);
    }
    componentDidUpdate() {
        this.scrollToBottom();
    }
    scrollToBottom() {
        this.ul.scrollTop = this.ul.scrollHeight;
    }
    render() {
        var messageListItems = this.state.messages.map(MessageSection.getMessageListItem);
        var name = this.state.thread && this.state.thread.name;
        return (<div className="message-section">
				<h3 className="message-thread-heading">{name}</h3>
				<ul className="message-list" ref={(e) => this.ul = e}>
					{messageListItems}
				</ul>
				<MessageComposer threadID={this.state.currentID}/>
			</div>);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVzc2FnZVNlY3Rpb24uanN4Iiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vdHMvY29tcG9uZW50L01lc3NhZ2VTZWN0aW9uLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiT0FBTyxLQUFLLEtBQUssTUFBTSxPQUFPO09BQ3ZCLFlBQVksTUFBTSx1QkFBdUI7T0FDekMsV0FBVyxNQUFNLHNCQUFzQjtPQUd2QyxlQUFlLE1BQU0sbUJBQW1CO09BQ3hDLGVBQWUsTUFBTSxtQkFBbUI7QUFhL0MsNENBQTRDLEtBQUssQ0FBQyxTQUFTO0lBSTFELFlBQVksS0FBeUI7UUFFcEMsTUFBTSxLQUFLLENBQUMsQ0FBQztRQXdDTixhQUFRLEdBQUM7WUFDaEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO1FBQ3BELENBQUMsQ0FBQTtRQXpDQSxJQUFJLENBQUMsS0FBSyxHQUFHLGNBQWMsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0lBQ2xELENBQUM7SUFFRCxPQUFlLGtCQUFrQjtRQUNoQyxNQUFNLENBQUM7WUFDTixRQUFRLEVBQUUsWUFBWSxDQUFDLHNCQUFzQixFQUFFO1lBQy9DLE1BQU0sRUFBRSxXQUFXLENBQUMsVUFBVSxFQUFFO1lBQ2hDLFNBQVMsRUFBRSxXQUFXLENBQUMsWUFBWSxFQUFFO1NBQ3JDLENBQUM7SUFDSCxDQUFDO0lBRUQsT0FBZSxrQkFBa0IsQ0FBQyxPQUFvQixFQUFFLEtBQVk7UUFDbkUsTUFBTSxDQUFDLENBQ04sQ0FBQyxlQUFlLENBQ2YsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQ1gsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQ2hCLENBQ0YsQ0FBQztJQUNILENBQUM7SUFFRCxpQkFBaUI7UUFDaEIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3RCLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDOUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsb0JBQW9CO1FBQ25CLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDakQsV0FBVyxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsa0JBQWtCO1FBQ2pCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRU8sY0FBYztRQUNyQixJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQztJQUMxQyxDQUFDO0lBTUQsTUFBTTtRQUVMLElBQUksZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ2xGLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUN2RCxNQUFNLENBQUMsQ0FDTixDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQy9CO0lBQUEsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUNqRDtJQUFBLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFrQixLQUFLLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQ3JFO0tBQUEsQ0FBQyxnQkFBZ0IsQ0FDbEI7SUFBQSxFQUFFLEVBQUUsQ0FDSjtJQUFBLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQ2pEO0dBQUEsRUFBRSxHQUFHLENBQUMsQ0FDTixDQUFDO0lBQ0gsQ0FBQztBQUNGLENBQUM7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IE1lc3NhZ2VTdG9yZSBmcm9tIFwiLi4vc3RvcmUvTWVzc2FnZVN0b3JlXCI7XG5pbXBvcnQgVGhyZWFkU3RvcmUgZnJvbSBcIi4uL3N0b3JlL1RocmVhZFN0b3JlXCI7XG5pbXBvcnQge01lc3NhZ2VTdGF0ZX0gZnJvbSBcIi4uL01lc3NhZ2VcIjtcbmltcG9ydCB7VGhyZWFkU3RhdGV9IGZyb20gXCIuLi9UaHJlYWRcIjtcbmltcG9ydCBNZXNzYWdlQ29tcG9zZXIgZnJvbSBcIi4vTWVzc2FnZUNvbXBvc2VyXCI7XG5pbXBvcnQgTWVzc2FnZUxpc3RJdGVtIGZyb20gXCIuL01lc3NhZ2VMaXN0SXRlbVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2VTZWN0aW9uUHJvcHNcbntcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNZXNzYWdlU2VjdGlvblN0YXRlXG57XG5cdG1lc3NhZ2VzOiBNZXNzYWdlU3RhdGVbXTtcblx0dGhyZWFkOiBUaHJlYWRTdGF0ZTtcblx0Y3VycmVudElEOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lc3NhZ2VTZWN0aW9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PE1lc3NhZ2VTZWN0aW9uUHJvcHMsIE1lc3NhZ2VTZWN0aW9uU3RhdGU+XG57XG5cdHVsOkhUTUxVTGlzdEVsZW1lbnQ7XG5cblx0Y29uc3RydWN0b3IocHJvcHM6TWVzc2FnZVNlY3Rpb25Qcm9wcylcblx0e1xuXHRcdHN1cGVyKHByb3BzKTtcblx0XHR0aGlzLnN0YXRlID0gTWVzc2FnZVNlY3Rpb24uZ2V0U3RhdGVGcm9tU3RvcmVzKCk7XG5cdH1cblxuXHRwcml2YXRlIHN0YXRpYyBnZXRTdGF0ZUZyb21TdG9yZXMoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdG1lc3NhZ2VzOiBNZXNzYWdlU3RvcmUuZ2V0QWxsRm9yQ3VycmVudFRocmVhZCgpLFxuXHRcdFx0dGhyZWFkOiBUaHJlYWRTdG9yZS5nZXRDdXJyZW50KCksXG5cdFx0XHRjdXJyZW50SUQ6IFRocmVhZFN0b3JlLmdldEN1cnJlbnRJRCgpXG5cdFx0fTtcblx0fVxuXG5cdHByaXZhdGUgc3RhdGljIGdldE1lc3NhZ2VMaXN0SXRlbShtZXNzYWdlOk1lc3NhZ2VTdGF0ZSwgaW5kZXg6bnVtYmVyKSB7XG5cdFx0cmV0dXJuIChcblx0XHRcdDxNZXNzYWdlTGlzdEl0ZW1cblx0XHRcdFx0a2V5PXtpbmRleH1cblx0XHRcdFx0bWVzc2FnZT17bWVzc2FnZX1cblx0XHRcdC8+XG5cdFx0KTtcblx0fVxuXG5cdGNvbXBvbmVudERpZE1vdW50KCkge1xuXHRcdHRoaXMuc2Nyb2xsVG9Cb3R0b20oKTtcblx0XHRNZXNzYWdlU3RvcmUuYWRkQ2hhbmdlTGlzdGVuZXIodGhpcy5vbkNoYW5nZSk7XG5cdFx0VGhyZWFkU3RvcmUuYWRkQ2hhbmdlTGlzdGVuZXIodGhpcy5vbkNoYW5nZSk7XG5cdH1cblxuXHRjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcblx0XHRNZXNzYWdlU3RvcmUucmVtb3ZlQ2hhbmdlTGlzdGVuZXIodGhpcy5vbkNoYW5nZSk7XG5cdFx0VGhyZWFkU3RvcmUucmVtb3ZlQ2hhbmdlTGlzdGVuZXIodGhpcy5vbkNoYW5nZSk7XG5cdH1cblxuXHRjb21wb25lbnREaWRVcGRhdGUoKSB7XG5cdFx0dGhpcy5zY3JvbGxUb0JvdHRvbSgpO1xuXHR9XG5cblx0cHJpdmF0ZSBzY3JvbGxUb0JvdHRvbSgpIHtcblx0XHR0aGlzLnVsLnNjcm9sbFRvcCA9IHRoaXMudWwuc2Nyb2xsSGVpZ2h0O1xuXHR9XG5cblx0cHJpdmF0ZSBvbkNoYW5nZT0oKT0+IHtcblx0XHR0aGlzLnNldFN0YXRlKE1lc3NhZ2VTZWN0aW9uLmdldFN0YXRlRnJvbVN0b3JlcygpKTtcblx0fVxuXG5cdHJlbmRlcigpXG5cdHtcblx0XHR2YXIgbWVzc2FnZUxpc3RJdGVtcyA9IHRoaXMuc3RhdGUubWVzc2FnZXMubWFwKE1lc3NhZ2VTZWN0aW9uLmdldE1lc3NhZ2VMaXN0SXRlbSk7XG5cdFx0dmFyIG5hbWUgPSB0aGlzLnN0YXRlLnRocmVhZCAmJiB0aGlzLnN0YXRlLnRocmVhZC5uYW1lO1xuXHRcdHJldHVybiAoXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cIm1lc3NhZ2Utc2VjdGlvblwiPlxuXHRcdFx0XHQ8aDMgY2xhc3NOYW1lPVwibWVzc2FnZS10aHJlYWQtaGVhZGluZ1wiPntuYW1lfTwvaDM+XG5cdFx0XHRcdDx1bCBjbGFzc05hbWU9XCJtZXNzYWdlLWxpc3RcIiByZWY9eyhlOkhUTUxVTGlzdEVsZW1lbnQpID0+IHRoaXMudWwgPSBlfT5cblx0XHRcdFx0XHR7bWVzc2FnZUxpc3RJdGVtc31cblx0XHRcdFx0PC91bD5cblx0XHRcdFx0PE1lc3NhZ2VDb21wb3NlciB0aHJlYWRJRD17dGhpcy5zdGF0ZS5jdXJyZW50SUR9Lz5cblx0XHRcdDwvZGl2PlxuXHRcdCk7XG5cdH1cbn0iXX0=