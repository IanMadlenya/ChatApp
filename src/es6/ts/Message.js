import * as weavejs from "weavejs";
import { Weave } from "weavejs";
var LinkableString = weavejs.core.LinkableString;
var LinkableBoolean = weavejs.core.LinkableBoolean;
export default class Message {
    constructor() {
        this.threadID = Weave.linkableChild(this, LinkableString);
        this.authorName = Weave.linkableChild(this, LinkableString);
        this.date = Weave.linkableChild(this, new LinkableString);
        this.text = Weave.linkableChild(this, new LinkableString);
        this.isRead = Weave.linkableChild(this, new LinkableBoolean);
    }
    set value(message) {
        this.threadID.value = message.threadID;
        this.authorName.value = message.authorName;
        this.date.value = message.date.toString();
        this.text.value = message.text;
        this.isRead.value = message.isRead;
    }
    get value() {
        return {
            threadID: this.threadID.value,
            authorName: this.authorName.value,
            date: new Date(this.date.value),
            text: this.text.value,
            isRead: this.isRead.value
        };
    }
}
Weave.registerClass(Message, "ChatApp.Message", null, "Message");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVzc2FnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3RzL01lc3NhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BQU8sS0FBSyxPQUFPLE1BQU0sU0FBUztPQUMzQixFQUFDLEtBQUssRUFBQyxNQUFNLFNBQVM7QUFDN0IsSUFBTyxjQUFjLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUM7QUFDcEQsSUFBTyxlQUFlLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7QUF1QnREO0lBQUE7UUFFQyxhQUFRLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDckQsZUFBVSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ3ZELFNBQUksR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxJQUFJLGNBQWMsQ0FBQyxDQUFDO1FBQ3JELFNBQUksR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxJQUFJLGNBQWMsQ0FBQyxDQUFDO1FBQ3JELFdBQU0sR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxJQUFJLGVBQWUsQ0FBQyxDQUFDO0lBcUJ6RCxDQUFDO0lBbkJBLElBQUksS0FBSyxDQUFDLE9BQW9CO1FBRTdCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7UUFDdkMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQztRQUMzQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDL0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUNwQyxDQUFDO0lBRUQsSUFBSSxLQUFLO1FBRVIsTUFBTSxDQUFDO1lBQ04sUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSztZQUM3QixVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLO1lBQ2pDLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUMvQixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLO1lBQ3JCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUs7U0FDekIsQ0FBQztJQUNILENBQUM7QUFDRixDQUFDO0FBQ0QsS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgd2VhdmVqcyBmcm9tIFwid2VhdmVqc1wiO1xuaW1wb3J0IHtXZWF2ZX0gZnJvbSBcIndlYXZlanNcIjtcbmltcG9ydCBMaW5rYWJsZVN0cmluZyA9IHdlYXZlanMuY29yZS5MaW5rYWJsZVN0cmluZztcbmltcG9ydCBMaW5rYWJsZUJvb2xlYW4gPSB3ZWF2ZWpzLmNvcmUuTGlua2FibGVCb29sZWFuO1xuaW1wb3J0IExpbmthYmxlTnVtYmVyID0gd2VhdmVqcy5jb3JlLkxpbmthYmxlTnVtYmVyO1xuaW1wb3J0IElMaW5rYWJsZU9iamVjdCA9IHdlYXZlanMuYXBpLmNvcmUuSUxpbmthYmxlT2JqZWN0O1xuXG5leHBvcnQgaW50ZXJmYWNlIFJhd01lc3NhZ2VTdGF0ZVxue1xuXHRpZDogc3RyaW5nO1xuXHR0aHJlYWRJRDogc3RyaW5nO1xuXHRhdXRob3JOYW1lOiBzdHJpbmc7XG5cdHRocmVhZE5hbWU6IHN0cmluZztcblx0dGltZXN0YW1wOiBudW1iZXI7XG5cdHRleHQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNZXNzYWdlU3RhdGVcbntcblx0dGhyZWFkSUQ6IHN0cmluZztcblx0YXV0aG9yTmFtZTogc3RyaW5nO1xuXHRkYXRlOiBEYXRlO1xuXHR0ZXh0OiBzdHJpbmc7XG5cdGlzUmVhZDogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVzc2FnZVxue1xuXHR0aHJlYWRJRCA9IFdlYXZlLmxpbmthYmxlQ2hpbGQodGhpcywgTGlua2FibGVTdHJpbmcpO1xuXHRhdXRob3JOYW1lID0gV2VhdmUubGlua2FibGVDaGlsZCh0aGlzLCBMaW5rYWJsZVN0cmluZyk7XG5cdGRhdGUgPSBXZWF2ZS5saW5rYWJsZUNoaWxkKHRoaXMsIG5ldyBMaW5rYWJsZVN0cmluZyk7XG5cdHRleHQgPSBXZWF2ZS5saW5rYWJsZUNoaWxkKHRoaXMsIG5ldyBMaW5rYWJsZVN0cmluZyk7XG5cdGlzUmVhZCA9IFdlYXZlLmxpbmthYmxlQ2hpbGQodGhpcywgbmV3IExpbmthYmxlQm9vbGVhbik7XG5cblx0c2V0IHZhbHVlKG1lc3NhZ2U6TWVzc2FnZVN0YXRlKVxuXHR7XG5cdFx0dGhpcy50aHJlYWRJRC52YWx1ZSA9IG1lc3NhZ2UudGhyZWFkSUQ7XG5cdFx0dGhpcy5hdXRob3JOYW1lLnZhbHVlID0gbWVzc2FnZS5hdXRob3JOYW1lO1xuXHRcdHRoaXMuZGF0ZS52YWx1ZSA9IG1lc3NhZ2UuZGF0ZS50b1N0cmluZygpO1xuXHRcdHRoaXMudGV4dC52YWx1ZSA9IG1lc3NhZ2UudGV4dDtcblx0XHR0aGlzLmlzUmVhZC52YWx1ZSA9IG1lc3NhZ2UuaXNSZWFkO1xuXHR9XG5cblx0Z2V0IHZhbHVlKClcblx0e1xuXHRcdHJldHVybiB7XG5cdFx0XHR0aHJlYWRJRDogdGhpcy50aHJlYWRJRC52YWx1ZSxcblx0XHRcdGF1dGhvck5hbWU6IHRoaXMuYXV0aG9yTmFtZS52YWx1ZSxcblx0XHRcdGRhdGU6IG5ldyBEYXRlKHRoaXMuZGF0ZS52YWx1ZSksXG5cdFx0XHR0ZXh0OiB0aGlzLnRleHQudmFsdWUsXG5cdFx0XHRpc1JlYWQ6IHRoaXMuaXNSZWFkLnZhbHVlXG5cdFx0fTtcblx0fVxufVxuV2VhdmUucmVnaXN0ZXJDbGFzcyhNZXNzYWdlLCBcIkNoYXRBcHAuTWVzc2FnZVwiLCBudWxsLCBcIk1lc3NhZ2VcIik7Il19