import * as weavejs from "weavejs";
import ChatMessageUtils from "../util/ChatMessageUtils";
import ThreadStore from "./ThreadStore";
var LinkableHashMap = weavejs.core.LinkableHashMap;
import { default as Message } from "../Message";
import AbstractStore from "./AbstractStore";
import Dispatcher from "../dispatcher/Dispatcher";
class MessageStore extends AbstractStore {
    constructor(...args) {
        super(...args);
        this.messages = Weave.linkableChild(this, new LinkableHashMap(Message));
    }
    addMessages(rawMessages) {
        rawMessages.forEach((rawMessage) => {
            var messageState = ChatMessageUtils.convertRawMessage(rawMessage);
            var message = this.messages.requestObject(rawMessage.id, Message);
            message.value = messageState;
        });
    }
    markAllInThreadRead(threadID) {
        for (var id of this.messages.getNames()) {
            var message = this.messages.getObject(id);
            if (message.threadID.value === threadID) {
                message.isRead.value = true;
            }
        }
    }
    get(id) {
        var messages = this.messages;
        var message = messages.getObject(id);
        return message.value;
    }
    getAll() {
        var messages = this.messages;
        return messages.getNames().map((id) => {
            return this.get(id);
        });
    }
    /**
     * @param {string} threadID
     */
    getAllForThread(threadID) {
        var threadMessages = [];
        for (var id of this.messages.getNames()) {
            var message = this.messages.getObject(id);
            if (message.threadID.value === threadID) {
                threadMessages.push(message.value);
            }
        }
        threadMessages.sort(function (a, b) {
            if (a.date < b.date) {
                return -1;
            }
            else if (a.date > b.date) {
                return 1;
            }
            return 0;
        });
        return threadMessages;
    }
    getAllForCurrentThread() {
        return this.getAllForThread(ThreadStore.getCurrentID());
    }
    clickThread() {
        this.markAllInThreadRead(ThreadStore.getCurrentID());
    }
    createMessage(text, currentThreadID) {
        var messageState = ChatMessageUtils.getCreatedMessageData(text, currentThreadID);
        var message = this.messages.requestObject(messageState.id, Message);
        message.value = messageState;
    }
    receiveRawMessages(rawMessages) {
        this.addMessages(rawMessages);
        this.markAllInThreadRead(ThreadStore.getCurrentID());
    }
}
Weave.registerClass(MessageStore, "ChatApp.store.MessageStore", null, "MessageStore");
export default Dispatcher.root.requestObject("message_store", MessageStore, true);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVzc2FnZVN0b3JlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vdHMvc3RvcmUvTWVzc2FnZVN0b3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJPQUFPLEtBQUssT0FBTyxNQUFNLFNBQVM7T0FDM0IsZ0JBQWdCLE1BQU0sMEJBQTBCO09BQ2hELFdBQVcsTUFBTSxlQUFlO0FBRXZDLElBQU8sZUFBZSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDO09BQy9DLEVBQWtCLE9BQU8sSUFBSSxPQUFPLEVBQWUsTUFBTSxZQUFZO09BQ3JFLGFBQWEsTUFBTSxpQkFBaUI7T0FDcEMsVUFBVSxNQUFNLDBCQUEwQjtBQUVqRCwyQkFBMkIsYUFBYTtJQUF4QztRQUEyQixlQUFhO1FBRy9CLGFBQVEsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxJQUFJLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBZ0Y1RSxDQUFDO0lBOUVRLFdBQVcsQ0FBQyxXQUE2QjtRQUNoRCxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVTtZQUM5QixJQUFJLFlBQVksR0FBRyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNsRSxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBWSxDQUFDO1lBQzdFLE9BQU8sQ0FBQyxLQUFLLEdBQUcsWUFBWSxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVPLG1CQUFtQixDQUFDLFFBQWU7UUFFMUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDekMsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFZLENB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QkFBNEIsRUFBRSxJQUFJLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFDdEYsZUFBZSxVQUFVLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgd2VhdmVqcyBmcm9tIFwid2VhdmVqc1wiO1xuaW1wb3J0IENoYXRNZXNzYWdlVXRpbHMgZnJvbSBcIi4uL3V0aWwvQ2hhdE1lc3NhZ2VVdGlsc1wiO1xuaW1wb3J0IFRocmVhZFN0b3JlIGZyb20gXCIuL1RocmVhZFN0b3JlXCI7XG5cbmltcG9ydCBMaW5rYWJsZUhhc2hNYXAgPSB3ZWF2ZWpzLmNvcmUuTGlua2FibGVIYXNoTWFwO1xuaW1wb3J0IHtSYXdNZXNzYWdlU3RhdGUsIGRlZmF1bHQgYXMgTWVzc2FnZSwgTWVzc2FnZVN0YXRlfSBmcm9tIFwiLi4vTWVzc2FnZVwiO1xuaW1wb3J0IEFic3RyYWN0U3RvcmUgZnJvbSBcIi4vQWJzdHJhY3RTdG9yZVwiO1xuaW1wb3J0IERpc3BhdGNoZXIgZnJvbSBcIi4uL2Rpc3BhdGNoZXIvRGlzcGF0Y2hlclwiO1xuXG5jbGFzcyBNZXNzYWdlU3RvcmUgZXh0ZW5kcyBBYnN0cmFjdFN0b3JlXG57XG5cblx0cHJpdmF0ZSBtZXNzYWdlcyA9IFdlYXZlLmxpbmthYmxlQ2hpbGQodGhpcywgbmV3IExpbmthYmxlSGFzaE1hcChNZXNzYWdlKSk7XG5cblx0cHJpdmF0ZSBhZGRNZXNzYWdlcyhyYXdNZXNzYWdlczpSYXdNZXNzYWdlU3RhdGVbXSkge1xuXHRcdHJhd01lc3NhZ2VzLmZvckVhY2goKHJhd01lc3NhZ2UpID0+IHtcblx0XHRcdHZhciBtZXNzYWdlU3RhdGUgPSBDaGF0TWVzc2FnZVV0aWxzLmNvbnZlcnRSYXdNZXNzYWdlKHJhd01lc3NhZ2UpO1xuXHRcdFx0dmFyIG1lc3NhZ2UgPSB0aGlzLm1lc3NhZ2VzLnJlcXVlc3RPYmplY3QocmF3TWVzc2FnZS5pZCwgTWVzc2FnZSkgYXMgTWVzc2FnZTtcblx0XHRcdG1lc3NhZ2UudmFsdWUgPSBtZXNzYWdlU3RhdGU7XG5cdFx0fSk7XG5cdH1cblxuXHRwcml2YXRlIG1hcmtBbGxJblRocmVhZFJlYWQodGhyZWFkSUQ6c3RyaW5nKVxuXHR7XG5cdFx0Zm9yICh2YXIgaWQgb2YgdGhpcy5tZXNzYWdlcy5nZXROYW1lcygpKSB7XG5cdFx0XHR2YXIgbWVzc2FnZSA9IHRoaXMubWVzc2FnZXMuZ2V0T2JqZWN0KGlkKSBhcyBNZXNzYWdlO1xuXHRcdFx0aWYobWVzc2FnZS50aHJlYWRJRC52YWx1ZSA9PT0gdGhyZWFkSUQpIHtcblx0XHRcdFx0bWVzc2FnZS5pc1JlYWQudmFsdWUgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgZ2V0KGlkOnN0cmluZyk6TWVzc2FnZVN0YXRlXG5cdHtcblx0XHR2YXIgbWVzc2FnZXMgPSB0aGlzLm1lc3NhZ2VzO1xuXHRcdHZhciBtZXNzYWdlID0gbWVzc2FnZXMuZ2V0T2JqZWN0KGlkKSBhcyBNZXNzYWdlO1xuXHRcdHJldHVybiBtZXNzYWdlLnZhbHVlO1xuXHR9XG5cblx0cHJpdmF0ZSBnZXRBbGwoKVxuXHR7XG5cdFx0dmFyIG1lc3NhZ2VzID0gdGhpcy5tZXNzYWdlcztcblx0XHRyZXR1cm4gbWVzc2FnZXMuZ2V0TmFtZXMoKS5tYXAoKGlkOnN0cmluZykgPT4ge1xuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KGlkKTtcblx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdGhyZWFkSURcblx0ICovXG5cdHByaXZhdGUgZ2V0QWxsRm9yVGhyZWFkKHRocmVhZElEOnN0cmluZykge1xuXG5cdFx0dmFyIHRocmVhZE1lc3NhZ2VzOk1lc3NhZ2VTdGF0ZVtdID0gW107XG5cblx0XHRmb3IgKHZhciBpZCBvZiB0aGlzLm1lc3NhZ2VzLmdldE5hbWVzKCkpIHtcblx0XHRcdHZhciBtZXNzYWdlID0gdGhpcy5tZXNzYWdlcy5nZXRPYmplY3QoaWQpIGFzIE1lc3NhZ2U7XG5cdFx0XHRpZiAobWVzc2FnZS50aHJlYWRJRC52YWx1ZSA9PT0gdGhyZWFkSUQpIHtcblx0XHRcdFx0dGhyZWFkTWVzc2FnZXMucHVzaChtZXNzYWdlLnZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0dGhyZWFkTWVzc2FnZXMuc29ydChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHRpZiAoYS5kYXRlIDwgYi5kYXRlKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH0gZWxzZSBpZiAoYS5kYXRlID4gYi5kYXRlKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHRocmVhZE1lc3NhZ2VzO1xuXHR9XG5cblx0cHVibGljIGdldEFsbEZvckN1cnJlbnRUaHJlYWQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0QWxsRm9yVGhyZWFkKFRocmVhZFN0b3JlLmdldEN1cnJlbnRJRCgpKTtcblx0fVxuXG5cdHB1YmxpYyBjbGlja1RocmVhZCgpXG5cdHtcblx0XHR0aGlzLm1hcmtBbGxJblRocmVhZFJlYWQoVGhyZWFkU3RvcmUuZ2V0Q3VycmVudElEKCkpO1xuXHR9XG5cblx0cHVibGljIGNyZWF0ZU1lc3NhZ2UodGV4dDpzdHJpbmcsIGN1cnJlbnRUaHJlYWRJRDpzdHJpbmcpXG5cdHtcblx0XHR2YXIgbWVzc2FnZVN0YXRlID0gQ2hhdE1lc3NhZ2VVdGlscy5nZXRDcmVhdGVkTWVzc2FnZURhdGEodGV4dCwgY3VycmVudFRocmVhZElEKTtcblx0XHR2YXIgbWVzc2FnZSA9IHRoaXMubWVzc2FnZXMucmVxdWVzdE9iamVjdChtZXNzYWdlU3RhdGUuaWQsIE1lc3NhZ2UpIGFzIE1lc3NhZ2U7XG5cdFx0bWVzc2FnZS52YWx1ZSA9IG1lc3NhZ2VTdGF0ZTtcblx0fVxuXG5cdHB1YmxpYyByZWNlaXZlUmF3TWVzc2FnZXMocmF3TWVzc2FnZXM6UmF3TWVzc2FnZVN0YXRlW10pXG5cdHtcblx0XHR0aGlzLmFkZE1lc3NhZ2VzKHJhd01lc3NhZ2VzKTtcblx0XHR0aGlzLm1hcmtBbGxJblRocmVhZFJlYWQoVGhyZWFkU3RvcmUuZ2V0Q3VycmVudElEKCkpO1xuXHR9XG59XG5cbldlYXZlLnJlZ2lzdGVyQ2xhc3MoTWVzc2FnZVN0b3JlLCBcIkNoYXRBcHAuc3RvcmUuTWVzc2FnZVN0b3JlXCIsIG51bGwsIFwiTWVzc2FnZVN0b3JlXCIpO1xuZXhwb3J0IGRlZmF1bHQgRGlzcGF0Y2hlci5yb290LnJlcXVlc3RPYmplY3QoXCJtZXNzYWdlX3N0b3JlXCIsIE1lc3NhZ2VTdG9yZSwgdHJ1ZSk7XG4iXX0=