import * as weavejs from "weavejs";
import { Weave } from "weavejs";
import ChatMessageUtils from "../util/ChatMessageUtils";
var LinkableHashMap = weavejs.core.LinkableHashMap;
var LinkableString = weavejs.core.LinkableString;
import Thread from "../Thread";
import AbstractStore from "./AbstractStore";
import Dispatcher from "../dispatcher/Dispatcher";
class ThreadStore extends AbstractStore {
    constructor(...args) {
        super(...args);
        this.currentID = Weave.linkableChild(this, LinkableString);
        this.threads = Weave.linkableChild(this, new LinkableHashMap(Thread));
    }
    /** private functions **/
    init(rawMessages) {
        rawMessages.forEach((message) => {
            var threadID = message.threadID;
            var thread = this.threads.requestObject(threadID, Thread);
            if (thread.value.lastMessage.date > new Date(message.timestamp))
                return;
            thread.value = {
                id: threadID,
                name: message.threadName,
                lastMessage: ChatMessageUtils.convertRawMessage(message, this.currentID.value)
            };
        });
        if (!this.currentID.value) {
            var allChrono = this.getAllChrono();
            this.currentID.value = allChrono[allChrono.length - 1].id;
        }
        this.threads.getObject(this.currentID.value).lastMessage.isRead.value = true;
    }
    /** state functions **/
    /**
     * @param {string} id
     */
    get(id) {
        var thread = this.threads.getObject(id);
        return thread ? thread.value : null;
    }
    getAll() {
        return (this.threads.getNames()).map((id) => {
            return this.get(id);
        });
    }
    getAllChrono() {
        var orderedThreads = this.getAll();
        orderedThreads.sort(function (a, b) {
            if (a.lastMessage.date < b.lastMessage.date) {
                return -1;
            }
            else if (a.lastMessage.date > b.lastMessage.date) {
                return 1;
            }
            return 0;
        });
        return orderedThreads;
    }
    getCurrentID() {
        return this.currentID.value;
    }
    getCurrent() {
        return this.get(this.getCurrentID());
    }
    /** action functions **/
    clickThread(threadID) {
        var thread = this.threads.getObject(threadID);
        thread.lastMessage.isRead.value = true;
    }
    receiveRawMessages(rawMessages) {
        this.init(rawMessages);
    }
}
Weave.registerClass(ThreadStore, "ChatApp.store.ThreadStore", null, "ThreadStore");
export default Dispatcher.root.requestObject("thread_store", ThreadStore, true);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhyZWFkU3RvcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy9zdG9yZS9UaHJlYWRTdG9yZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiT0FBTyxLQUFLLE9BQU8sTUFBTSxTQUFTO09BQzNCLEVBQUMsS0FBSyxFQUFDLE1BQU0sU0FBUztPQUN0QixnQkFBZ0IsTUFBTSwwQkFBMEI7QUFHdkQsSUFBTyxlQUFlLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7QUFDdEQsSUFBTyxjQUFjLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUM7T0FDN0MsTUFBTSxNQUFNLFdBQVc7T0FFdkIsYUFBYSxNQUFNLGlCQUFpQjtPQUNwQyxVQUFVLE1BQU0sMEJBQTBCO0FBRWpELDBCQUEwQixhQUFhO0lBQXZDO1FBQTBCLGVBQWE7UUFHOUIsY0FBUyxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ3RELFlBQU8sR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxJQUFJLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBOEUxRSxDQUFDO0lBNUVBLHlCQUF5QjtJQUNqQixJQUFJLENBQUMsV0FBNkI7UUFFekMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU87WUFDM0IsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztZQUNoQyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFFMUQsRUFBRSxDQUFBLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDOUQsTUFBTSxDQUFDO1lBRVIsTUFBTSxDQUFDLEtBQUssR0FBRztnQkFDZCxF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LGFBQWEsQ0FBQyxjQUFjLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgd2VhdmVqcyBmcm9tIFwid2VhdmVqc1wiO1xuaW1wb3J0IHtXZWF2ZX0gZnJvbSBcIndlYXZlanNcIjtcbmltcG9ydCBDaGF0TWVzc2FnZVV0aWxzIGZyb20gXCIuLi91dGlsL0NoYXRNZXNzYWdlVXRpbHNcIjtcblxuaW1wb3J0IFdlYXZlU3RvcmUgPSB3ZWF2ZWpzLmZsdXguV2VhdmVTdG9yZTtcbmltcG9ydCBMaW5rYWJsZUhhc2hNYXAgPSB3ZWF2ZWpzLmNvcmUuTGlua2FibGVIYXNoTWFwO1xuaW1wb3J0IExpbmthYmxlU3RyaW5nID0gd2VhdmVqcy5jb3JlLkxpbmthYmxlU3RyaW5nO1xuaW1wb3J0IFRocmVhZCBmcm9tIFwiLi4vVGhyZWFkXCI7XG5pbXBvcnQge1Jhd01lc3NhZ2VTdGF0ZX0gZnJvbSBcIi4uL01lc3NhZ2VcIjtcbmltcG9ydCBBYnN0cmFjdFN0b3JlIGZyb20gXCIuL0Fic3RyYWN0U3RvcmVcIjtcbmltcG9ydCBEaXNwYXRjaGVyIGZyb20gXCIuLi9kaXNwYXRjaGVyL0Rpc3BhdGNoZXJcIjtcblxuY2xhc3MgVGhyZWFkU3RvcmUgZXh0ZW5kcyBBYnN0cmFjdFN0b3JlXG57XG5cblx0cHJpdmF0ZSBjdXJyZW50SUQgPSBXZWF2ZS5saW5rYWJsZUNoaWxkKHRoaXMsIExpbmthYmxlU3RyaW5nKTtcblx0cHJpdmF0ZSB0aHJlYWRzID0gV2VhdmUubGlua2FibGVDaGlsZCh0aGlzLCBuZXcgTGlua2FibGVIYXNoTWFwKFRocmVhZCkpO1xuXG5cdC8qKiBwcml2YXRlIGZ1bmN0aW9ucyAqKi9cblx0cHJpdmF0ZSBpbml0KHJhd01lc3NhZ2VzOlJhd01lc3NhZ2VTdGF0ZVtdKVxuXHR7XG5cdFx0cmF3TWVzc2FnZXMuZm9yRWFjaCgobWVzc2FnZSkgPT4ge1xuXHRcdFx0dmFyIHRocmVhZElEID0gbWVzc2FnZS50aHJlYWRJRDtcblx0XHRcdHZhciB0aHJlYWQgPSB0aGlzLnRocmVhZHMucmVxdWVzdE9iamVjdCh0aHJlYWRJRCwgVGhyZWFkKTtcblxuXHRcdFx0aWYodGhyZWFkLnZhbHVlLmxhc3RNZXNzYWdlLmRhdGUgPiBuZXcgRGF0ZShtZXNzYWdlLnRpbWVzdGFtcCkpXG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0dGhyZWFkLnZhbHVlID0ge1xuXHRcdFx0XHRpZDogdGhyZWFkSUQsXG5cdFx0XHRcdG5hbWU6IG1lc3NhZ2UudGhyZWFkTmFtZSxcblx0XHRcdFx0bGFzdE1lc3NhZ2U6IENoYXRNZXNzYWdlVXRpbHMuY29udmVydFJhd01lc3NhZ2UobWVzc2FnZSwgdGhpcy5jdXJyZW50SUQudmFsdWUpXG5cdFx0XHR9O1xuXHRcdH0pO1xuXG5cdFx0aWYgKCF0aGlzLmN1cnJlbnRJRC52YWx1ZSkge1xuXHRcdFx0dmFyIGFsbENocm9ubyA9IHRoaXMuZ2V0QWxsQ2hyb25vKCk7XG5cdFx0XHR0aGlzLmN1cnJlbnRJRC52YWx1ZSA9IGFsbENocm9ub1thbGxDaHJvbm8ubGVuZ3RoIC0gMV0uaWQ7XG5cdFx0fVxuXG5cdFx0KHRoaXMudGhyZWFkcy5nZXRPYmplY3QodGhpcy5jdXJyZW50SUQudmFsdWUpIGFzIFRocmVhZCkubGFzdE1lc3NhZ2UuaXNSZWFkLnZhbHVlID0gdHJ1ZTtcblx0fVxuXG5cdC8qKiBzdGF0ZSBmdW5jdGlvbnMgKiovXG5cblx0LyoqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuXHQgKi9cblx0cHVibGljIGdldChpZDpzdHJpbmcpIHtcblx0XHR2YXIgdGhyZWFkID0gdGhpcy50aHJlYWRzLmdldE9iamVjdChpZCkgYXMgVGhyZWFkO1xuXHRcdHJldHVybiB0aHJlYWQgPyB0aHJlYWQudmFsdWUgOiBudWxsO1xuXHR9XG5cblx0cHVibGljIGdldEFsbCgpXG5cdHtcblx0XHRyZXR1cm4gKHRoaXMudGhyZWFkcy5nZXROYW1lcygpKS5tYXAoKGlkOnN0cmluZykgPT4ge1xuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KGlkKTtcblx0XHR9KTtcblx0fVxuXG5cdHB1YmxpYyBnZXRBbGxDaHJvbm8oKVxuXHR7XG5cdFx0dmFyIG9yZGVyZWRUaHJlYWRzID0gdGhpcy5nZXRBbGwoKTtcblxuXHRcdG9yZGVyZWRUaHJlYWRzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0aWYgKGEubGFzdE1lc3NhZ2UuZGF0ZSA8IGIubGFzdE1lc3NhZ2UuZGF0ZSkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9IGVsc2UgaWYgKGEubGFzdE1lc3NhZ2UuZGF0ZSA+IGIubGFzdE1lc3NhZ2UuZGF0ZSkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblx0XHRcdHJldHVybiAwO1xuXHRcdH0pO1xuXHRcdHJldHVybiBvcmRlcmVkVGhyZWFkcztcblx0fVxuXG5cdHB1YmxpYyBnZXRDdXJyZW50SUQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuY3VycmVudElELnZhbHVlO1xuXHR9XG5cblx0cHVibGljIGdldEN1cnJlbnQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0KHRoaXMuZ2V0Q3VycmVudElEKCkpO1xuXHR9XG5cblx0LyoqIGFjdGlvbiBmdW5jdGlvbnMgKiovXG5cdHB1YmxpYyBjbGlja1RocmVhZCh0aHJlYWRJRDpzdHJpbmcpXG5cdHtcblx0XHR2YXIgdGhyZWFkID0gdGhpcy50aHJlYWRzLmdldE9iamVjdCh0aHJlYWRJRCkgYXMgVGhyZWFkO1xuXHRcdHRocmVhZC5sYXN0TWVzc2FnZS5pc1JlYWQudmFsdWUgPSB0cnVlO1xuXHR9XG5cblx0cHVibGljIHJlY2VpdmVSYXdNZXNzYWdlcyhyYXdNZXNzYWdlczpSYXdNZXNzYWdlU3RhdGVbXSlcblx0e1xuXHRcdHRoaXMuaW5pdChyYXdNZXNzYWdlcyk7XG5cdH1cbn1cbldlYXZlLnJlZ2lzdGVyQ2xhc3MoVGhyZWFkU3RvcmUsIFwiQ2hhdEFwcC5zdG9yZS5UaHJlYWRTdG9yZVwiLCBudWxsLCBcIlRocmVhZFN0b3JlXCIpO1xuZXhwb3J0IGRlZmF1bHQgRGlzcGF0Y2hlci5yb290LnJlcXVlc3RPYmplY3QoXCJ0aHJlYWRfc3RvcmVcIiwgVGhyZWFkU3RvcmUsIHRydWUpOyJdfQ==